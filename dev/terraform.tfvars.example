# ====================================================================
# Terraform Variables Example File
# Copy this file to terraform.tfvars and modify with your actual values
# ====================================================================

# ====================================================================
# Basic Environment Settings
# ====================================================================
environment = "dev"                    # Environment: dev, stg, prod
project     = "your-project-name"      # Project name for resource naming
owner       = "your-name"              # Resource owner name
aws_region  = "ap-northeast-2"         # AWS region

# ====================================================================
# External Service Integration
# ====================================================================
# Terraform Cloud Settings
tfc_organization = "Your-TFC-Org"      # Terraform Cloud organization name
tfc_workspace    = "Your-Workspace"    # Terraform Cloud workspace name

# GitHub Settings
github_organization = "your-github-org"    # GitHub organization or username
github_repository   = "your-repo-name"     # GitHub repository name

# ====================================================================
# Network Configuration
# ====================================================================
vpc_cidr_block = "10.0.0.0/16"         # VPC CIDR block

public_cidrs = [                        # Public subnet CIDRs
  "10.0.1.0/24",
  "10.0.2.0/24"
]

private_cidrs = [                       # Private subnet CIDRs
  "10.0.10.0/24",
  "10.0.20.0/24"
]

database_cidrs = [                      # Database subnet CIDRs
  "10.0.100.0/27",
  "10.0.200.0/27"
]

# ====================================================================
# Cost Optimization Settings
# ====================================================================
enable_nat_gateway = false             # true: production, false: dev (cost savings)

# ====================================================================
# Domain and SSL Configuration
# ====================================================================
primary_domain  = "your-domain.com"    # Primary domain name
create_wildcard = true                  # Create wildcard certificate

# ====================================================================
# Multiple ECS Services Configuration
# ====================================================================
services = {
  # ====================================================================
  # Nginx Web Server Example
  # ====================================================================
  "nginx-web" = {
    # Task Definition Configuration
    family         = "your-project-dev-nginx"   # Task definition family name
    cpu            = 256                         # CPU units (256, 512, 1024, 2048, 4096)
    memory         = 512                         # Memory in MB
    container_port = 80                          # Container port

    # Container Configuration
    image = "nginx:alpine"                       # Container image

    # Service Configuration
    desired_count        = 1                     # Initial task count (Auto Scaling will manage this)
    enable_service       = true                  # Create ECS service
    enable_load_balancer = true                  # Create ALB

    # Domain Configuration
    domain_name     = "nginx.your-domain.com"   # Service domain
    certificate_arn = null                       # Use default certificate

    # Auto Scaling Configuration
    enable_autoscaling       = true              # Enable auto scaling
    min_capacity            = 1                  # Minimum tasks
    max_capacity            = 5                  # Maximum tasks
    target_cpu_utilization  = 70                # CPU target percentage

    # Health Check Configuration
    health_check_path    = "/"                   # Health check path
    health_check_matcher = "200"                 # Success response code

    # Logging Configuration
    log_retention_days = 7                       # Log retention period (days)

    # Environment Variables
    environment_variables = {
      NGINX_PORT   = "80"
      ENV          = "dev"
      SERVICE_NAME = "nginx-web"
    }

    # Secrets (empty for example)
    secrets = {}
  },

  # ====================================================================
  # API Service Example
  # ====================================================================
  "api-service" = {
    # Task Definition Configuration
    family         = "your-project-dev-api"     # Task definition family name
    cpu            = 512                         # Higher CPU for API
    memory         = 1024                        # Higher memory for API
    container_port = 3000                        # API port

    # Container Configuration
    image = "node:18-alpine"                     # Node.js runtime

    # Optional: Custom command for simple API
    command = [
      "sh", "-c",
      "npm init -y && npm install express && echo 'const express = require(\"express\"); const app = express(); app.get(\"/\", (req, res) => res.json({message: \"Hello API!\"})); app.get(\"/health\", (req, res) => res.json({status: \"healthy\"})); app.listen(3000);' > app.js && node app.js"
    ]

    # Service Configuration
    desired_count        = 2                     # Start with 2 instances
    enable_service       = true                  # Create ECS service
    enable_load_balancer = true                  # Create ALB

    # Domain Configuration
    domain_name     = "api.your-domain.com"     # API domain
    certificate_arn = null                       # Use default certificate

    # Auto Scaling Configuration
    enable_autoscaling       = true              # Enable auto scaling
    min_capacity            = 1                  # Minimum tasks
    max_capacity            = 10                 # Higher max for API
    target_cpu_utilization  = 80                # Higher CPU threshold

    # Health Check Configuration
    health_check_path    = "/health"             # API health endpoint
    health_check_matcher = "200"                 # Success response code

    # Logging Configuration
    log_retention_days = 14                      # Longer retention for API

    # Environment Variables
    environment_variables = {
      NODE_ENV = "development"
      PORT     = "3000"
      API_NAME = "your-api-service"
    }

    # Secrets (empty for example)
    secrets = {}
  },

  # ====================================================================
  # Internal Service Example (No Load Balancer)
  # ====================================================================
  "worker-service" = {
    # Task Definition Configuration
    family         = "your-project-dev-worker"  # Task definition family name
    cpu            = 256                         # CPU units
    memory         = 512                         # Memory in MB
    container_port = 8080                        # Internal port

    # Container Configuration
    image = "python:3.11-alpine"                # Python runtime

    # Service Configuration
    desired_count        = 1                     # Single worker instance
    enable_service       = true                  # Create ECS service
    enable_load_balancer = false                # No ALB needed for internal service

    # Domain Configuration (not needed for internal service)
    domain_name     = null                       # No external domain
    certificate_arn = null                       # No certificate needed

    # Auto Scaling Configuration
    enable_autoscaling       = false             # No auto scaling for worker
    min_capacity            = 1                  # Not used when auto scaling disabled
    max_capacity            = 1                  # Not used when auto scaling disabled
    target_cpu_utilization  = 70                # Not used when auto scaling disabled

    # Health Check Configuration (not used without ALB)
    health_check_path    = "/status"             # Internal status endpoint
    health_check_matcher = "200"                 # Success response code

    # Logging Configuration
    log_retention_days = 7                       # Log retention period

    # Environment Variables
    environment_variables = {
      WORKER_TYPE = "background"
      LOG_LEVEL   = "INFO"
    }

    # Custom Security Group Rules for internal access
    security_group_rules = {
      internal_access = {
        type        = "ingress"
        from_port   = 8080
        to_port     = 8080
        protocol    = "tcp"
        cidr_blocks = ["10.0.0.0/16"]           # VPC internal access only
      }
    }

    # Secrets (empty for example)
    secrets = {}
  }
}

# ====================================================================
# ECS Cluster Configuration
# ====================================================================
ecs_cluster = {
  # Capacity Provider Settings
  capacity_providers = ["FARGATE", "FARGATE_SPOT"]

  # Monitoring & Logging (cost considerations)
  enable_container_insights           = false    # Container Insights (incurs cost)
  log_retention_in_days              = 7        # Log retention period
  create_service_discovery_namespace = false    # Service Discovery (enable if needed)
  create_execution_role              = true     # Execution Role creation

  # Capacity Provider Strategy (cost optimization)
  capacity_provider_strategy = [
    {
      capacity_provider = "FARGATE_SPOT"    # Spot instances first (cheaper)
      weight           = 3                  # Weight
      base            = 0                   # Base count
    },
    {
      capacity_provider = "FARGATE"         # Regular Fargate (stability)
      weight           = 1                  # Weight
      base            = 1                   # Base count
    }
  ]
}

# ====================================================================
# ACM Certificate Configuration
# ====================================================================
acm_config = {
  validation_method                           = "DNS"        # DNS validation
  create_route53_records                     = true         # Auto-create Route53 records
  wait_for_validation                        = true         # Wait for validation completion
  key_algorithm                              = "RSA_2048"   # Key algorithm
  certificate_transparency_logging_preference = "ENABLED"   # CT logging
}

# ====================================================================
# Sensitive Variables (separate configuration required)
# ====================================================================
# ROUTE53_PUB_ZONE_ID = "Z1234567890ABC"    # Route53 Hosted Zone ID
#
# Set this variable using one of the following methods:
# 1. Terraform Cloud Variables (recommended)
# 2. Environment variable: export TF_VAR_ROUTE53_PUB_ZONE_ID="Z1234567890ABC"
# 3. CLI argument: terraform apply -var="ROUTE53_PUB_ZONE_ID=Z1234567890ABC"

# ====================================================================
# Usage Examples
# ====================================================================
#
# Single service (nginx only):
# Remove "api-service" and "worker-service" from the services map
#
# Multiple web services:
# Add more services with different domain names (e.g., nginx1.domain.com, nginx2.domain.com)
#
# Internal services only:
# Set enable_load_balancer = false and domain_name = null
#
# Cost optimization:
# - Set desired_count = 1, max_capacity = 3
# - Use FARGATE_SPOT with higher weight
# - Disable container_insights
# - Use shorter log_retention_days
#
# Production settings:
# - Set desired_count = 2 or higher
# - Enable container_insights = true
# - Use longer log_retention_days (30-90)
# - Set enable_nat_gateway = true for private subnets